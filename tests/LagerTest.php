<?php
// Call LagerTest::main() if this source file is executed directly.
if (!defined("PHPUnit_MAIN_METHOD")) {
    define("PHPUnit_MAIN_METHOD", "LagerTest::main");
}

require_once "PHPUnit/Framework/TestCase.php";
require_once "PHPUnit/Framework/TestSuite.php";

require_once 'include/class_Lager.php';
require_once 'database.php';

define("FILL", 5000);
define("O2FILL", 5000); //175033);
/**
 * Test class for Lager.
 * Generated by PHPUnit_Util_Skeleton on 2007-12-23 at 09:57:03.
 */
class LagerTest extends PHPUnit_Framework_TestCase {

	private $lager;

    /**
     * Runs the test methods of this class.
     *
     * @access public
     * @static
     */
    public static function main() {
        require_once "PHPUnit/TextUI/TestRunner.php";

        $suite  = new PHPUnit_Framework_TestSuite("LagerTest");
        $result = PHPUnit_TextUI_TestRunner::run($suite);
    }

    /**
     * Sets up the fixture, for example, open a network connection.
     * This method is called before a test is executed.
     *
     * @access protected
     */
    protected function setUp() {
		$this->lager = new Lager(null,
			array('b_depot'=>8, 'b_oxygen_depot'=>4, 't_depot_management'=>4,
				  'r_iridium'=>FILL, 'r_holzium'=>FILL, 'r_water'=>FILL, 'r_oxygen'=>O2FILL));
    }

    /**
     * Tears down the fixture, for example, close a network connection.
     * This method is called after a test is executed.
     *
     * @access protected
     */
    protected function tearDown() {
    	$this->lager = null;
    }

    public function testAddIridium() {
        $this->assertTrue( $this->lager->getIridium() == FILL );
        $this->lager->addIridium(5000);
        $this->assertTrue( $this->lager->getIridium() == FILL + 5000 );
    }

    public function testAddIridium2() {
        $this->assertTrue( $this->lager->getIridium() == FILL );
        $this->lager->addIridium(500000);
        $this->assertTrue( $this->lager->getIridium() + $this->lager->getHolzium() + $this->lager->getWater() <= $this->lager->getCapacity() );
        $this->assertTrue( $this->lager->fillLevel() == $this->lager->getCapacity() );
        $this->assertTrue( $this->lager->fillLevelPercent() == 100 );
    }
    
    public function testAddHolzium() {
        $this->assertTrue( $this->lager->getHolzium() == FILL );
        $this->lager->addHolzium(5000);
        $this->assertTrue( $this->lager->getHolzium() == FILL + 5000 );
    }

    public function testAddHolzium2() {
        $this->assertTrue( $this->lager->getHolzium() == FILL );
        $this->lager->addHolzium(500000);
        $this->assertTrue( $this->lager->getIridium() + $this->lager->getHolzium() + $this->lager->getWater() <= $this->lager->getCapacity() );
        $this->assertTrue( $this->lager->fillLevel() == $this->lager->getCapacity() );
        $this->assertTrue( $this->lager->fillLevelPercent() == 100 );
    }

    public function testAddWater() {
        $this->assertTrue( $this->lager->getWater() == FILL );
        $this->lager->addWater(5000);
        $this->assertTrue( $this->lager->getWater() == FILL + 5000 );
    }

    public function testAddWater2() {
        $this->assertTrue( $this->lager->getWater() == FILL );
        $this->lager->addWater(500000);
        $this->assertTrue( $this->lager->getIridium() + $this->lager->getHolzium() + $this->lager->getWater() <= $this->lager->getCapacity() );
        $this->assertTrue( $this->lager->fillLevel() == $this->lager->getCapacity() );
        $this->assertTrue( $this->lager->fillLevelPercent() == 100 );
    }

    public function testAddOxygen() {
        $this->assertTrue( $this->lager->getOxygen() == O2FILL );
        $this->lager->addOxygen(5000);
        $this->assertTrue( $this->lager->getOxygen() == O2FILL + 5000 );
    }

    public function testAddOxygen2() {
        $this->assertTrue( $this->lager->getOxygen() == O2FILL );
        $this->lager->addOxygen(500000);
        $this->assertTrue( $this->lager->getOxygen() <= $this->lager->getCapacityOxygen() );
        $this->assertTrue( $this->lager->fillLevelOxygen() == $this->lager->getCapacityOxygen() );
        $this->assertTrue( $this->lager->fillLevelOxygenPercent() == 100 );
    }

    public function testRemoveIridium() {
        $this->assertTrue( $this->lager->getIridium() == FILL );
        $this->lager->removeIridium(2500);
        $this->assertTrue( $this->lager->getIridium() == FILL - 2500 );
    }

    public function testRemoveHolzium() {
        $this->assertTrue( $this->lager->getHolzium() == FILL );
        $this->lager->removeHolzium(2500);
        $this->assertTrue( $this->lager->getHolzium() == FILL - 2500 );
    }

    public function testRemoveWater() {
        $this->assertTrue( $this->lager->getWater() == FILL );
        $this->lager->removeWater(2500);
        $this->assertTrue( $this->lager->getWater() == FILL - 2500 );
    }

    public function testRemoveOxygen() {
        $this->assertTrue( $this->lager->getOxygen() == O2FILL );
        $this->lager->removeOxygen(2500);
        $this->assertTrue( $this->lager->getOxygen() == O2FILL - 2500 );
    }
    
    public function testGetIridium() {
        $this->assertTrue( $this->lager->getIridium() == FILL );
    }

    public function testGetHolzium() {
        $this->assertTrue( $this->lager->getHolzium() == FILL );
    }

    public function testGetWater() {
        $this->assertTrue( $this->lager->getWater() == FILL );
    }

    public function testGetOxygen() {
        $this->assertTrue( $this->lager->getOxygen() == O2FILL );
    }
    
    public function testGetCapacity() {
        $this->assertTrue( $this->lager->getCapacity() == round((5000 * pow(8,2) + 100000) * pow(1.05, 4)) );
    }

    public function testGetCapacityOxygen() {
        $this->assertTrue( $this->lager->getCapacityOxygen() == round((4000 * pow(4,2) + 80000) * pow(1.05, 4)) );
    }

    public function testFillLevel() {
        $this->assertTrue( $this->lager->fillLevel() == 15000 );
    }

    public function testFillLevelOxygen() {
        $this->assertTrue( $this->lager->fillLevelOxygen() == O2FILL );
    }

    public function testFillLevelPercent() {
        $this->assertTrue( $this->lager->fillLevelPercent() == 15000 / round((FILL * pow(8,2) + 100000) * pow(1.05, 4)) * 100 );
    }

    public function testFillLevelOxygenPercent() {
        $this->assertTrue( $this->lager->fillLevelOxygenPercent() == O2FILL / round((4000 * pow(4,2) + 80000) * pow(1.05, 4)) * 100 );
    }
    
    public function testRecalcCapacity() {
    	$this->lager->addIridium(1000000);
        $this->assertTrue( $this->lager->getIridium() + $this->lager->getHolzium() + $this->lager->getWater() <= $this->lager->getCapacity() );
    	$this->lager->recalcCapacity(7, 4, 4);
        $this->assertTrue( $this->lager->getCapacity() == round((FILL * pow(7, 2) + 100000) * pow(1.05, 4)) );
        $this->assertTrue( $this->lager->getIridium() + $this->lager->getHolzium() + $this->lager->getWater() <= $this->lager->getCapacity() );
        $this->assertTrue( $this->lager->fillLevelPercent() <= 100 );
    }
    public function testRecalcCapacity2() {
    	$this->lager->addIridium(1000000);
    	$this->lager->recalcCapacity(8, 4, 3);
        $this->assertTrue( $this->lager->getCapacity() == round((FILL * pow(8, 2) + 100000) * pow(1.05, 3)) );
        $this->assertTrue( $this->lager->getIridium() + $this->lager->getHolzium() + $this->lager->getWater() <= $this->lager->getCapacity() );
        $this->assertTrue( $this->lager->fillLevelPercent() <= 100 );
    }
    public function testRecalcCapacity3() {
    	$this->lager->addIridium(1000000);
        $this->assertTrue( $this->lager->getIridium() + $this->lager->getHolzium() + $this->lager->getWater() <= $this->lager->getCapacity() );
    	$this->lager->recalcCapacity(7, 4, 3);
        $this->assertTrue( $this->lager->getCapacity() == round((FILL * pow(7, 2) + 100000) * pow(1.05, 3)) );
        $this->assertTrue( $this->lager->getIridium() + $this->lager->getHolzium() + $this->lager->getWater() <= $this->lager->getCapacity() );
        $this->assertTrue( $this->lager->fillLevelPercent() <= 100 );
    }
    public function testRecalcCapacity4() {
    	$this->lager->addIridium(1000000);
        $this->assertTrue( $this->lager->getIridium() + $this->lager->getHolzium() + $this->lager->getWater() <= $this->lager->getCapacity() );
    	$this->lager->recalcCapacity(9, 4, 5);
        $this->assertTrue( $this->lager->getCapacity() == round((FILL * pow(9, 2) + 100000) * pow(1.05, 5)) );
        $this->assertTrue( $this->lager->getIridium() + $this->lager->getHolzium() + $this->lager->getWater() <= $this->lager->getCapacity() );
        $this->assertTrue( $this->lager->fillLevelPercent() <= 100 );
    }
    public function testRecalcCapacity5() {
    	$this->lager->addOxygen(1000000);
        $this->assertTrue( $this->lager->getOxygen() <= $this->lager->getCapacityOxygen() );
    	$this->lager->recalcCapacity(8, 3, 4);
        $this->assertTrue( $this->lager->getCapacityOxygen() == round((4000 * pow(3,2) + 80000) * pow(1.05, 4)) );
        $this->assertTrue( $this->lager->getOxygen() <= $this->lager->getCapacityOxygen() );
        $this->assertTrue( $this->lager->fillLevelOxygenPercent() <= 100 );
    }
    public function testRecalcCapacity6() {
    	$this->lager->addOxygen(1000000);
        $this->assertTrue( $this->lager->getOxygen() <= $this->lager->getCapacityOxygen() );
    	$this->lager->recalcCapacity(8, 4, 3);
        $this->assertTrue( $this->lager->getCapacityOxygen() == round((4000 * pow(4,2) + 80000) * pow(1.05, 3)) );
        $this->assertTrue( $this->lager->getOxygen() <= $this->lager->getCapacityOxygen() );
        $this->assertTrue( $this->lager->fillLevelOxygenPercent() <= 100 );
    }
    public function testRecalcCapacity7() {
    	$this->lager->addOxygen(1000000);
        $this->assertTrue( $this->lager->getOxygen() <= $this->lager->getCapacityOxygen() );
    	$this->lager->recalcCapacity(8, 5, 5);
        $this->assertTrue( $this->lager->getCapacityOxygen() == round((4000 * pow(5,2) + 80000) * pow(1.05, 5)) );
        $this->assertTrue( $this->lager->getOxygen() <= $this->lager->getCapacityOxygen() );
        $this->assertTrue( $this->lager->fillLevelOxygenPercent() <= 100 );
    }
    
}

// Call LagerTest::main() if this source file is executed directly.
if (PHPUnit_MAIN_METHOD == "LagerTest::main") {
    LagerTest::main();
}
?>
